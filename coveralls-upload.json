{"repo_token":"aTAR5mL5iuOKEyR3DLTX1v3VfjlvRv0Ns","git":{"branch":"main","head":{"id":"'e655038f75962b8c27f9f217e2e020a010233097","author_name":"POABOB","author_email":"38785340+POABOB@users.noreply.github.com","committer_name":"POABOB","committer_email":"38785340+POABOB@users.noreply.github.com","message":"\u65b0\u589e.coveralls.yml'"},"remotes":[{"name":"origin","url":"https:\/\/github.com\/POABOB\/Slim-4-Framework.git"}]},"run_at":"2022-07-23 16:34:43 +0000","source_files":[{"name":"src\\Action\\Auth\\LoginAction.php","source":"<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Action\\Auth;\n\nuse Slim\\Http\\Response;\n\/\/ \u767c\u73fe\u4f7f\u7528Slim\\Http\\Request\u5e38\u5e38\u6703\u5831\u932f\uff0c\u6240\u4ee5\u4f7f\u7528\u5b98\u65b9\u7684Request\u7576\u4f5c\u8acb\u6c42\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse App\\Domain\\Auth\\Service\\LoginService;\n\n\/**\n * @OA\\Post(\n *      path=\"\/api\/login\", \n *      tags={\"\u767b\u5165\u767b\u51fa\"},\n *      summary=\"\u767b\u5165\",\n *      @OA\\RequestBody(\n *          @OA\\MediaType(\n *              mediaType=\"application\/json\",\n *              @OA\\Schema(\n *                  required={\"name\", \"password\"},\n *                  @OA\\Property(property=\"name\",         type=\"string(64)\", example=\"admin\"),\n *                  @OA\\Property(property=\"password\",     type=\"string(64)\", example=\"admin\"),\n *              )\n *          )\n *      ),\n *      @OA\\Response(\n *          response=\"200\", \n *          description=\"\u767b\u5165\",\n *          @OA\\JsonContent(type=\"object\",\n *              @OA\\Property(property=\"code\",         type=\"integer\", example=200),\n *              @OA\\Property(property=\"message\",      example=\"null\"),\n *              @OA\\Property(property=\"data\",         type=\"object\",\n *                      @OA\\Property(property=\"access_token\", type=\"string\", example=\"<token>\"),\n *                      @OA\\Property(property=\"token_type\",   type=\"string(64)\", example=\"Bearer\"),\n *                      @OA\\Property(property=\"expires_in\",   type=\"int(11)\", example=\"86400\"),\n\n *              ),\n *          ),\n *      ),\n *      @OA\\Response(response=\"401\",          description=\"\u63d0\u4ea4\u683c\u5f0f\u6709\u8aa4\"),\n *      @OA\\Response(response=\"400\",          description=\"\u5e33\u865f\u6216\u5bc6\u78bc\u932f\u8aa4\"),\n * )\n *\/\nfinal class LoginAction\n{\n    \/**\n     * \n     *\n     * @var LoginService The login service \n     *\/\n    private LoginService $service;\n \n    public function __construct(LoginService $service)\n    {\n        $this->service = $service;\n    }\n \n    public function __invoke(Request $req, Response $res): Response\n    {\n        $data = (array)$req->getParsedBody();\n        $return = $this->service->login($data);\n        return $res->withJson($return, 200, JSON_UNESCAPED_UNICODE);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,null,null,null,null,6,6,6,null,null]},{"name":"src\\Action\\Auth\\LogoutAction.php","source":"<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Action\\Auth;\r\n\r\nuse Slim\\Http\\Response;\r\n\/\/ \u767c\u73fe\u4f7f\u7528Slim\\Http\\Request\u5e38\u5e38\u6703\u5831\u932f\uff0c\u6240\u4ee5\u4f7f\u7528\u5b98\u65b9\u7684Request\u7576\u4f5c\u8acb\u6c42\r\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\r\nuse App\\Domain\\Auth\\Service\\LogoutService;\r\n\r\n\/**\r\n * @OA\\Get(\r\n *      path=\"\/api\/logout\", \r\n *      tags={\"\u767b\u5165\u767b\u51fa\"},\r\n *      summary=\"\u767b\u51fa\",\r\n *      @OA\\Response(\r\n *          response=\"200\", \r\n *          description=\"\u767b\u5165\",\r\n *          @OA\\JsonContent(type=\"object\",\r\n *              @OA\\Property(property=\"code\", type=\"integer\", example=200),\r\n *              @OA\\Property(property=\"data\", example=\"null\"),\r\n *              @OA\\Property(property=\"message\", example=\"Success\"),\r\n *          ),\r\n *      ),\r\n * )\r\n *\/\r\nfinal class LogoutAction\r\n{\r\n    \/** @var LogoutService The Logout service *\/\r\n    private LogoutService $service;\r\n \r\n    public function __construct(LogoutService $service)\r\n    {\r\n      $this->service = $service;\r\n    }\r\n \r\n    public function __invoke(Request $req, Response $res): Response\r\n    {\r\n      $return = $this->service->logout();\r\n      return $res->withJson($return, 200, JSON_UNESCAPED_UNICODE);\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,1,1,null,null]},{"name":"src\\Action\\Users\\DeleteAction.php","source":"<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Action\\Users;\r\n\r\nuse Slim\\Http\\Response;\r\n\/\/ \u767c\u73fe\u4f7f\u7528Slim\\Http\\Request\u5e38\u5e38\u6703\u5831\u932f\uff0c\u6240\u4ee5\u4f7f\u7528\u5b98\u65b9\u7684Request\u7576\u4f5c\u8acb\u6c42\r\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\r\nuse App\\Domain\\Users\\Service\\DeleteService;\r\n\/**\r\n * @OA\\Delete(\r\n *      path=\"\/api\/user\", \r\n *      tags={\"Users\"},\r\n *      summary=\"\u522a\u9664Users\",\r\n *      security={{\"Authorization\":{}}}, \r\n *      @OA\\RequestBody(\r\n *          @OA\\MediaType(\r\n *              mediaType=\"application\/json\",\r\n *              @OA\\Schema(\r\n *                  required={\"id\"},\r\n *                  @OA\\Property(property=\"id\", type=\"int(11)\", example=\"2\"),\r\n *              )\r\n *          )\r\n *      ),\r\n *      @OA\\Response(\r\n *          response=\"200\", \r\n *          description=\"\u7372\u53d6Users\",\r\n *          @OA\\JsonContent(type=\"object\",\r\n *              @OA\\Property(property=\"code\", type=\"integer\", example=200),\r\n *              @OA\\Property(property=\"data\", example=\"null\"),\r\n *              @OA\\Property(property=\"message\", example=\"Success\"),\r\n *          ),\r\n *      ),\r\n *      @OA\\Response(response=\"401\", description=\"\u63d0\u4ea4\u683c\u5f0f\u6709\u8aa4\"),\r\n * )\r\n *\/\r\nfinal class DeleteAction\r\n{\r\n  \/** @var DeleteService The user service *\/\r\n  private DeleteService $service;\r\n\r\n  public function __construct(DeleteService $service)\r\n  {\r\n    $this->service = $service;\r\n  }\r\n\r\n  public function __invoke(Request $req, Response $res): Response\r\n  {\r\n      \/\/ \u7372\u53d6json\r\n      $data = (array)$req->getParsedBody();\r\n      $return = $this->service->deleteUser($data);\r\n      return $res->withJson($return, 200, JSON_UNESCAPED_UNICODE);\r\n  }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,2,2,2,null,null]},{"name":"src\\Action\\Users\\GetAction.php","source":"<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Action\\Users;\r\n\r\nuse Slim\\Http\\Response;\r\n\/\/ \u767c\u73fe\u4f7f\u7528Slim\\Http\\Request\u5e38\u5e38\u6703\u5831\u932f\uff0c\u6240\u4ee5\u4f7f\u7528\u5b98\u65b9\u7684Request\u7576\u4f5c\u8acb\u6c42\r\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\r\nuse App\\Domain\\Users\\Service\\GetService;\r\n\/**\r\n * @OA\\Get(\r\n *      path=\"\/api\/user\", \r\n *      tags={\"Users\"},\r\n *      summary=\"\u7372\u53d6Users\",\r\n *      @OA\\Response(\r\n *          response=\"200\", \r\n *          description=\"\u7372\u53d6Users\",\r\n *          @OA\\JsonContent(type=\"object\",\r\n *              @OA\\Property(property=\"code\", type=\"integer\", example=200),\r\n *              @OA\\Property(property=\"data\", type=\"array\",\r\n *                    @OA\\Items(type=\"object\",\r\n *                      @OA\\Property(property=\"id\", type=\"int(11)\", example=\"1\"),\r\n *                      @OA\\Property(property=\"name\", type=\"string(64)\", example=\"Bob\"),\r\n *                    ), \r\n *              ),\r\n *              @OA\\Property(property=\"message\", example=\"Success\"),\r\n *          ),\r\n *      ),\r\n * )\r\n *\/\r\nfinal class GetAction\r\n{\r\n  \/** @var GetService The user service *\/\r\n  private GetService $service;\r\n\r\n\r\n  public function __construct(GetService $service)\r\n  {\r\n    $this->service = $service;\r\n  }\r\n\r\n  public function __invoke(Request $req, Response $res): Response\r\n  {\r\n      \/\/ \u4f7f\u7528Service\r\n      $return = $this->service->getUsers();\r\n      return $res->withJson($return, 200, JSON_UNESCAPED_UNICODE);\r\n  }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,1,1,null,null]},{"name":"src\\Action\\Users\\InsertAction.php","source":"<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Action\\Users;\r\n\r\nuse Slim\\Http\\Response;\r\n\/\/ \u767c\u73fe\u4f7f\u7528Slim\\Http\\Request\u5e38\u5e38\u6703\u5831\u932f\uff0c\u6240\u4ee5\u4f7f\u7528\u5b98\u65b9\u7684Request\u7576\u4f5c\u8acb\u6c42\r\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\r\nuse App\\Domain\\Users\\Service\\InsertService;\r\n\/**\r\n * @OA\\Post(\r\n *      path=\"\/api\/user\", \r\n *      tags={\"Users\"},\r\n *      summary=\"\u63d2\u5165Users\",\r\n *      @OA\\RequestBody(\r\n *          @OA\\MediaType(\r\n *              mediaType=\"application\/json\",\r\n *              @OA\\Schema(\r\n *                  required={\"name\"},\r\n *                  @OA\\Property(property=\"name\", type=\"string(64)\", example=\"Nick\"),\r\n *              )\r\n *          )\r\n *      ),\r\n *      @OA\\Response(\r\n *          response=\"200\", \r\n *          description=\"\u7372\u53d6Users\",\r\n *          @OA\\JsonContent(type=\"object\",\r\n *              @OA\\Property(property=\"code\", type=\"integer\", example=200),\r\n *              @OA\\Property(property=\"data\", example=\"null\"),\r\n *              @OA\\Property(property=\"message\", example=\"Success\"),\r\n *          ),\r\n *      ),\r\n *      @OA\\Response(response=\"401\", description=\"\u63d0\u4ea4\u683c\u5f0f\u6709\u8aa4\"),\r\n * )\r\n *\/\r\nfinal class InsertAction\r\n{\r\n  \/** @var InsertService The user service *\/\r\n  private InsertService $service;\r\n\r\n  public function __construct(InsertService $service)\r\n  {\r\n    $this->service = $service;\r\n  }\r\n\r\n  public function __invoke(Request $req, Response $res): Response\r\n  {\r\n      \/\/ \u7372\u53d6json\r\n      $data = (array)$req->getParsedBody();\r\n      $return = $this->service->insertUser($data);\r\n      return $res->withJson($return, 200, JSON_UNESCAPED_UNICODE);\r\n  }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,2,2,2,null,null]},{"name":"src\\Action\\Users\\UpdateAction.php","source":"<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Action\\Users;\r\n\r\nuse Slim\\Http\\Response;\r\n\/\/ \u767c\u73fe\u4f7f\u7528Slim\\Http\\Request\u5e38\u5e38\u6703\u5831\u932f\uff0c\u6240\u4ee5\u4f7f\u7528\u5b98\u65b9\u7684Request\u7576\u4f5c\u8acb\u6c42\r\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\r\nuse App\\Domain\\Users\\Service\\UpdateService;\r\n\/**\r\n * @OA\\Patch(\r\n *      path=\"\/api\/user\", \r\n *      tags={\"Users\"},\r\n *      summary=\"\u66f4\u65b0Users\",\r\n *      @OA\\RequestBody(\r\n *          @OA\\MediaType(\r\n *              mediaType=\"application\/json\",\r\n *              @OA\\Schema(\r\n *                  required={\"id\",\"name\"},\r\n *                  @OA\\Property(property=\"id\", type=\"int(11)\", example=\"2\"),\r\n *                  @OA\\Property(property=\"name\", type=\"string(64)\", example=\"Nick\"),\r\n *              )\r\n *          )\r\n *      ),\r\n *      @OA\\Response(\r\n *          response=\"200\", \r\n *          description=\"\u7372\u53d6Users\",\r\n *          @OA\\JsonContent(type=\"object\",\r\n *              @OA\\Property(property=\"code\", type=\"integer\", example=200),\r\n *              @OA\\Property(property=\"data\", example=\"null\"),\r\n *              @OA\\Property(property=\"message\", example=\"Success\"),\r\n *          ),\r\n *      ),\r\n *      @OA\\Response(response=\"401\", description=\"\u63d0\u4ea4\u683c\u5f0f\u6709\u8aa4\"),\r\n * )\r\n *\/\r\nfinal class UpdateAction\r\n{\r\n  \/** @var UpdateService The user service *\/\r\n  private UpdateService $service;\r\n\r\n  public function __construct(UpdateService $service)\r\n  {\r\n    $this->service = $service;\r\n  }\r\n\r\n  public function __invoke(Request $req, Response $res): Response\r\n  {\r\n      \/\/ \u7372\u53d6json\r\n      $data = (array)$req->getParsedBody();\r\n      $return = $this->service->updateUser($data);\r\n      return $res->withJson($return, 200, JSON_UNESCAPED_UNICODE);\r\n  }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,2,2,2,null,null]},{"name":"src\\Domain\\Auth\\Repository\\AuthRepository.php","source":"<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Domain\\Auth\\Repository;\r\n\r\nuse UnexpectedValueException;\r\nuse Medoo\\Medoo;\r\n\r\nclass AuthRepository {\r\n    \r\n  \/** @var Medoo $DB \u9023\u7dda *\/\r\n  private Medoo $db;\r\n\r\n  \/**\r\n   *\r\n   * @param Medoo $DB \u9023\u7dda\r\n   *\/\r\n  public function __construct(Medoo $db)\r\n  {\r\n    $this->db = $db;\r\n  }\r\n\r\n  \/**\r\n   * \u767b\u5165\r\n   *\r\n   * @param array|string \u6b04\u4f4d\r\n   * @param array|int WHERE\u689d\u4ef6\r\n   * @param string \u8868\u540d\r\n   * \r\n   * @return array\r\n   *\/\r\n  public function login(array | string $params = \"*\", array | int $where = 1, string $table = \"Users\"): array\r\n  {\r\n    try {\r\n      \/\/ return $this->db->select($table, $params, $where);\r\n      return [\"name\" => \"USER\"];\r\n    } catch (PDOException $e) {\r\n      throw new UnexpectedValueException($e->getMessage());\r\n    }\r\n  }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,5,0,0,null,null,null]},{"name":"src\\Domain\\Auth\\Service\\LoginService.php","source":"<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Domain\\Auth\\Service;\r\n\r\nuse App\\Domain\\Auth\\Repository\\AuthRepository;\r\nuse App\\Utils\\ResponseFormat;\r\nuse App\\Utils\\Validation;\r\nuse App\\Utils\\Jwt;\r\n\r\nfinal class LoginService {\r\n\r\n  \/** @var AuthRepository *\/\r\n  private AuthRepository $repository;\r\n\r\n  \/** @var ResponseFormat *\/\r\n  private ResponseFormat $res;\r\n\r\n  \/** @var Validation *\/\r\n  private Validation $v;\r\n\r\n  \/** @var Jwt *\/\r\n  private Jwt $jwt;\r\n\r\n  \/**\r\n   * @param AuthRepository $repository DB\u64cd\u4f5c\r\n   * @param ResponseFormat response\r\n   * @param Validation \u8868\u55ae\u9a57\u8b49\r\n   *\/\r\n  public function __construct(AuthRepository $repository, ResponseFormat $res, Validation $v, Jwt $jwt)\r\n  {\r\n    $this->repository = $repository;\r\n    $this->res = $res;\r\n    $this->v = $v;\r\n    $this->jwt = $jwt;\r\n  }\r\n\r\n  \/**\r\n   * Login\r\n   *\r\n   * @param array $name, $password\r\n   *\r\n   * @return ResponseFormat \r\n   *\/\r\n  public function login(array $data): ResponseFormat\r\n  {\r\n    $this->v->validate(\r\n      [\r\n        \"\u5e33\u865f\" => (!empty($data[\"name\"]) ? $data[\"name\"] : \"\"),\r\n        \"\u5bc6\u78bc\" => (!empty($data[\"password\"]) ? $data[\"password\"] : \"\")\r\n      ],\r\n      [\r\n        \"\u5e33\u865f\" => [\"required\", \"maxLen\" => 64],\r\n        \"\u5bc6\u78bc\" => [\"required\", \"maxLen\" => 64]\r\n      ]\r\n    );\r\n\r\n    \/\/ Invalid\r\n    if($this->v->error()) {\r\n      return $this->res->format(401, $this->v->error(),\"\u63d0\u4ea4\u683c\u5f0f\u6709\u8aa4!\");\r\n    }\r\n\r\n    \r\n    \/\/ \u67e5\u770b\u767b\u5165\r\n    $data = $this->repository->login($data);\r\n\r\n    if (!$data) {\r\n      return $this->res->format(400, \"\u5e33\u865f\u6216\u5bc6\u78bc\u932f\u8aa4\");\r\n    }\r\n\r\n\r\n    \/\/ Transform the result into a OAuh 2.0 Access Token Response\r\n    \/\/ https:\/\/www.oauth.com\/oauth2-servers\/access-tokens\/access-token-response\/\r\n    $token = $this->jwt->createJwt([\"name\" => $data[\"name\"], \"role\" => \"admin\"]);\r\n    $lifetime = $this->jwt->getLifetime();\r\n    $result = [\r\n        \"access_token\" => $token,\r\n        \"token_type\" => \"Bearer\",\r\n        \"expires_in\" => $lifetime,\r\n    ];\r\n    return $this->res->format(200, $result);\r\n  }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,6,6,6,null,null,null,null,null,null,null,null,null,null,null,6,null,6,6,null,null,6,null,null,null,null,null,6,1,null,null,null,null,5,null,5,0,null,null,null,null,null,5,5,5,null,null,null,null,5,null,null]},{"name":"src\\Domain\\Auth\\Service\\LogoutService.php","source":"<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Domain\\Auth\\Service;\r\n\r\nuse App\\Utils\\ResponseFormat;\r\n\r\nfinal class LogoutService {\r\n\r\n  \/** @var ResponseFormat *\/\r\n  private ResponseFormat $res;\r\n\r\n  \/**\r\n   *\r\n   * @param ResponseFormat response\r\n   *\/\r\n  public function __construct(ResponseFormat $res)\r\n  {\r\n    $this->res = $res;\r\n  }\r\n\r\n  \/**\r\n   * Logout\r\n   *\r\n   * @return ResponseFormat \r\n   *\/\r\n  public function logout(): ResponseFormat\r\n  {\r\n    return $this->res->format(200, \"Success\");\r\n  }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src\\Domain\\Users\\Repository\\UsersRepository.php","source":"<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Domain\\Users\\Repository;\r\n\r\nuse UnexpectedValueException;\r\nuse Medoo\\Medoo;\r\n\r\nclass UsersRepository {\r\n    \r\n  \/** @var Medoo $DB \u9023\u7dda *\/\r\n  private Medoo $db;\r\n\r\n  \/**\r\n   *\r\n   * @param Medoo $DB \u9023\u7dda\r\n   *\/\r\n  public function __construct(Medoo $db)\r\n  {\r\n    $this->db = $db;\r\n  }\r\n\r\n  \/**\r\n   * \u7372\u53d6Users\r\n   *\r\n   * @param array|string \u6b04\u4f4d\r\n   * @param array|int WHERE\u689d\u4ef6\r\n   * @param string \u8868\u540d\r\n   * \r\n   * @return array\r\n   *\/\r\n  public function getUsers(array | string $params = \"*\", array | int $where = 1, string $table = \"Users\"): array\r\n  {\r\n    try {\r\n      return $this->db->select($table, $params, $where);\r\n    } catch (PDOException $e) {\r\n      throw new UnexpectedValueException($e->getMessage());\r\n    }\r\n  }\r\n\r\n  \/**\r\n   * \u63d2\u5165User\r\n   *\r\n   * @param array \u6b04\u4f4d\r\n   * @param string \u8868\u540d\r\n   * \r\n   * @return void\r\n   *\/\r\n  public function insertUser(array $params = [], string $table = \"Users\"): void\r\n  {\r\n    try {\r\n      $this->db->insert($table, $params);\r\n      return;\r\n    } catch (PDOException $e) {\r\n      throw new UnexpectedValueException($e->getMessage());\r\n    }\r\n  }\r\n\r\n  \/**\r\n   * \u66f4\u65b0User\r\n   *\r\n   * @param array \u6b04\u4f4d\r\n   * @param array WHERE\u689d\u4ef6\r\n   * @param string \u8868\u540d\r\n   * \r\n   * @return int\r\n   *\/\r\n  public function updateUser(array $params = [], array $where = [], string $table = \"Users\"): void\r\n  {\r\n    try {\r\n      $this->db->update($table, $params, $where);\r\n      return;\r\n    } catch (PDOException $e) {\r\n      throw new UnexpectedValueException($e->getMessage());\r\n    }\r\n  }\r\n\r\n  \/**\r\n   * \u522a\u9664User\r\n   *\r\n   * @param array WHERE\u689d\u4ef6\r\n   * @param string \u8868\u540d\r\n   * \r\n   * @return void\r\n   *\/\r\n  public function deleteUser(array $where = [], string $table = \"Users\"): void\r\n  {\r\n    try {\r\n      $this->db->delete($table, $where);\r\n      return;\r\n    } catch (PDOException $e) {\r\n      throw new UnexpectedValueException($e->getMessage());\r\n    }\r\n  }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,0,0,null,null,null]},{"name":"src\\Domain\\Users\\Service\\DeleteService.php","source":"<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Domain\\Users\\Service;\r\n\r\nuse App\\Domain\\Users\\Repository\\UsersRepository;\r\nuse App\\Utils\\ResponseFormat;\r\nuse App\\Utils\\Validation;\r\n\r\nfinal class DeleteService {\r\n\r\n  \/** @var UsersRepository *\/\r\n  private UsersRepository $repository;\r\n\r\n  \/** @var ResponseFormat *\/\r\n  private ResponseFormat $res;\r\n\r\n  \/** @var Validation *\/\r\n  private Validation $v;\r\n  \/**\r\n   *\r\n   * @param UsersRepository $repository DB\u64cd\u4f5c\r\n   * @param ResponseFormat $res \u56de\u50b3\u56fa\u5b9a\u683c\u5f0f\r\n   * @param Validation $v \u8868\u55ae\u9a57\u8b49\r\n   *\/\r\n  public function __construct(UsersRepository $repository, ResponseFormat $res, Validation $v)\r\n  {\r\n    $this->repository = $repository;\r\n    $this->res = $res;\r\n    $this->v = $v;\r\n  }\r\n\r\n  \/**\r\n   * \u522a\u9664Users\r\n   *\r\n   * @param array $user \u8cc7\u6599\u578b\u5225\r\n   *\r\n   * @return array Users array\r\n   *\/\r\n  public function deleteUser(array $data): ResponseFormat\r\n  {\r\n    \/\/ Validation\r\n    $this->v->validate(\r\n      [\"ID\" => (!empty($data[\"id\"]) ? $data[\"id\"] : \"\")],\r\n      [\"ID\" => [\"required\", \"maxLen\" => 11]]\r\n    );\r\n\r\n    \/\/ Invalid\r\n    if($this->v->error()) {\r\n      return $this->res->format(401, $this->v->error(),\"\u63d0\u4ea4\u683c\u5f0f\u6709\u8aa4!\");\r\n    }\r\n\r\n    $this->repository->deleteUser([\"id\" => $data[\"id\"]]);\r\n    return $this->res->format(200, \"Success\");\r\n  }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,2,2,null,null,null,null,null,null,null,null,null,null,null,null,2,2,2,null,null,null,2,1,null,null,1,1,null,null]},{"name":"src\\Domain\\Users\\Service\\GetService.php","source":"<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Domain\\Users\\Service;\r\n\r\nuse App\\Domain\\Users\\Repository\\UsersRepository;\r\nuse App\\Utils\\ResponseFormat;\r\n\r\nfinal class GetService {\r\n\r\n  \/** @var UsersRepository *\/\r\n  private UsersRepository $repository;\r\n\r\n  \/** @var ResponseFormat *\/\r\n  private ResponseFormat $res;\r\n\r\n  \/**\r\n   *\r\n   * @param UsersRepository $repository DB\u64cd\u4f5c\r\n   *\/\r\n  public function __construct(UsersRepository $repository, ResponseFormat $res)\r\n  {\r\n    $this->repository = $repository;\r\n    $this->res = $res;\r\n  }\r\n\r\n  \/**\r\n   * \u7372\u53d6Users\r\n   *\r\n   * @param array $user \u8cc7\u6599\u578b\u5225\r\n   *\r\n   * @return ResponseFormat \r\n   *\/\r\n  public function getUsers(): ResponseFormat\r\n  {\r\n    \/\/ \u7372\u53d6Users\r\n    $data = $this->repository->getUsers();\r\n    return $this->res->format(200, $data);\r\n  }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,null]},{"name":"src\\Domain\\Users\\Service\\InsertService.php","source":"<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Domain\\Users\\Service;\r\n\r\nuse App\\Domain\\Users\\Repository\\UsersRepository;\r\nuse App\\Utils\\ResponseFormat;\r\nuse App\\Utils\\Validation;\r\n\r\nfinal class InsertService {\r\n\r\n  \/** @var UsersRepository *\/\r\n  private UsersRepository $repository;\r\n\r\n  \/** @var ResponseFormat *\/\r\n  private ResponseFormat $res;\r\n\r\n  \/** @var Validation *\/\r\n  private Validation $v;\r\n  \/**\r\n   *\r\n   * @param UsersRepository $repository DB\u64cd\u4f5c\r\n   * @param ResponseFormat $res \u56de\u50b3\u56fa\u5b9a\u683c\u5f0f\r\n   * @param Validation $v \u8868\u55ae\u9a57\u8b49\r\n   *\/\r\n  public function __construct(UsersRepository $repository, ResponseFormat $res, Validation $v)\r\n  {\r\n    $this->repository = $repository;\r\n    $this->res = $res;\r\n    $this->v = $v;\r\n  }\r\n\r\n  \/**\r\n   * \u63d2\u5165User\r\n   *\r\n   * @param array $user \u8cc7\u6599\u578b\u5225\r\n   *\r\n   * @return array Users array\r\n   *\/\r\n  public function insertUser(array $data): ResponseFormat\r\n  {\r\n    \/\/ Validation\r\n    $this->v->validate(\r\n      [\"\u59d3\u540d\" => (!empty($data[\"name\"]) ? $data[\"name\"] : \"\")],\r\n      [\"\u59d3\u540d\" => [\"required\", \"maxLen\" => 64]]\r\n    );\r\n\r\n    \/\/ Invalid\r\n    if($this->v->error()) {\r\n      return $this->res->format(401, $this->v->error(),\"\u63d0\u4ea4\u683c\u5f0f\u6709\u8aa4!\");\r\n    }\r\n\r\n    $this->repository->insertUser($data);\r\n    return $this->res->format(200, \"Success\");\r\n  }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,2,2,null,null,null,null,null,null,null,null,null,null,null,null,2,2,2,null,null,null,2,1,null,null,1,1,null,null]},{"name":"src\\Domain\\Users\\Service\\UpdateService.php","source":"<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Domain\\Users\\Service;\r\n\r\nuse App\\Domain\\Users\\Repository\\UsersRepository;\r\nuse App\\Utils\\ResponseFormat;\r\nuse App\\Utils\\Validation;\r\n\r\nfinal class UpdateService {\r\n\r\n  \/** @var UsersRepository *\/\r\n  private UsersRepository $repository;\r\n\r\n  \/** @var ResponseFormat *\/\r\n  private ResponseFormat $res;\r\n\r\n  \/** @var Validation *\/\r\n  private Validation $v;\r\n  \/**\r\n   *\r\n   * @param UsersRepository $repository DB\u64cd\u4f5c\r\n   * @param ResponseFormat $res \u56de\u50b3\u56fa\u5b9a\u683c\u5f0f\r\n   * @param Validation $v \u8868\u55ae\u9a57\u8b49\r\n   *\/\r\n  public function __construct(UsersRepository $repository, ResponseFormat $res, Validation $v)\r\n  {\r\n    $this->repository = $repository;\r\n    $this->res = $res;\r\n    $this->v = $v;\r\n  }\r\n\r\n  \/**\r\n   * \u66f4\u65b0Users\r\n   *\r\n   * @param array $user \u8cc7\u6599\u578b\u5225\r\n   *\r\n   * @return array Users array\r\n   *\/\r\n  public function updateUser(array $data): ResponseFormat\r\n  {\r\n    \/\/ Validation\r\n    $this->v->validate(\r\n      [\r\n        \"ID\" => (!empty($data[\"id\"]) ? $data[\"id\"] : \"\"),\r\n        \"\u59d3\u540d\" => (!empty($data[\"name\"]) ? $data[\"name\"] : \"\")\r\n      ],\r\n      [\r\n        \"ID\" => [\"required\", \"maxLen\" => 11],\r\n        \"\u59d3\u540d\" => [\"required\", \"maxLen\" => 64]\r\n      ]\r\n    );\r\n\r\n    \/\/ Invalid\r\n    if($this->v->error()) {\r\n      return $this->res->format(401, $this->v->error(),\"\u63d0\u4ea4\u683c\u5f0f\u6709\u8aa4!\");\r\n    }\r\n\r\n    $this->repository->updateUser(\r\n      [\"name\" => $data[\"name\"]],\r\n      [\"id\" => $data[\"id\"]]\r\n    );\r\n    return $this->res->format(200, \"Success\");\r\n  }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,2,2,null,null,null,null,null,null,null,null,null,null,null,null,2,null,2,2,null,null,2,null,null,null,null,null,2,1,null,null,1,1,1,null,1,null,null]},{"name":"src\\Middleware\\JwtAuth.php","source":"<?php\r\n\r\ndeclare(strict_types=1);\r\n \r\nnamespace App\\Middleware;\r\n \r\nuse App\\Utils\\Jwt;\r\nuse App\\Utils\\ResponseFormat;\r\n\/\/ use Psr\\Http\\Message\\ResponseFactoryInterface;\r\n\r\nuse Slim\\Http\\Factory\\DecoratedResponseFactory;\r\nuse Psr\\Http\\Message\\ResponseInterface;\r\nuse Psr\\Http\\Message\\ServerRequestInterface;\r\nuse Psr\\Http\\Server\\MiddlewareInterface;\r\nuse Psr\\Http\\Server\\RequestHandlerInterface;\r\n \r\n\/**\r\n * JWT middleware.\r\n *\/\r\nfinal class JwtAuth implements MiddlewareInterface\r\n{\r\n    \/** @var Jwt JWT authorizer *\/\r\n    private Jwt $jwt;\r\n \r\n    \/**\r\n     *  @var DecoratedResponseFactory\r\n     *  The response factory \r\n     *\/\r\n    private DecoratedResponseFactory $responseFactory;\r\n\r\n    \/**\r\n     *  @var ResponseFormat\r\n     *\/\r\n    private ResponseFormat $response;\r\n \r\n    public function __construct(Jwt $jwt, DecoratedResponseFactory $responseFactory, ResponseFormat $response)\r\n    {\r\n        $this->jwt = $jwt;\r\n        $this->responseFactory = $responseFactory;\r\n        $this->response = $response;\r\n    }\r\n \r\n    \/**\r\n     * Invoke middleware.\r\n     *\r\n     * @param ServerRequestInterface $request The request\r\n     * @param RequestHandlerInterface $handler The handler\r\n     *\r\n     * @return ResponseInterface The response\r\n     *\/\r\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\r\n    {\r\n        $authorization = explode(\" \", (string)$request->getHeaderLine(\"Authorization\"));\r\n        $token = $authorization[1] ?? \"\";\r\n\r\n        \/\/ \u5224\u65b7\u6709\u7121TOKEN\u4e26\u9a57\u8b49\r\n        if (!$token || !$this->jwt->validateToken($token)) {\r\n            return $this->responseFactory->createResponse()\r\n                ->withJson($this->response->format(403, \"\u8acb\u5148\u767b\u5165\"), 200, JSON_UNESCAPED_UNICODE);\r\n        }\r\n \r\n        \/\/ Append valid token\r\n        $parsedToken = $this->jwt->createParsedToken($token);\r\n        $request = $request->withAttribute(\"token\", $parsedToken);\r\n \r\n        \/\/ Append the info as request attribute\r\n        $request = $request->withAttribute(\"info\", $parsedToken->claims()->get(\"info\"));\r\n \r\n        return $handler->handle($request);\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,2,2,null,null,null,null,null,null,null,null,null,null,null,null,2,2,null,null,2,0,0,null,null,null,2,2,null,null,2,null,2,null,null]},{"name":"src\\Utils\\Jwt.php","source":"<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Utils;\r\n \r\nuse UnexpectedValueException;\r\nuse InvalidArgumentException;\r\n\r\nuse Lcobucci\\JWT\\Configuration;\r\nuse Lcobucci\\JWT\\Signer\\Hmac\\Sha256;\r\nuse Lcobucci\\JWT\\Signer;\r\nuse Lcobucci\\JWT\\Signer\\Key\\InMemory;\r\nuse Lcobucci\\JWT\\Token\\Plain;\r\n\r\nuse Lcobucci\\JWT\\Validation\\Constraint\\SignedWith;\r\nuse Lcobucci\\JWT\\Validation\\Constraint\\IssuedBy;\r\nuse Lcobucci\\JWT\\Validation\\Constraint\\IdentifiedBy;\r\nuse Lcobucci\\JWT\\Validation\\Constraint\\ValidAt;\r\n\r\nuse Lcobucci\\Clock\\SystemClock;\r\nuse DateTimeImmutable;\r\nuse DateTimeZone;\r\n\r\nfinal class Jwt\r\n{\r\n    \/** @var string The issuer name *\/\r\n    private string $issuer;\r\n \r\n    \/** @var int Max lifetime in seconds *\/\r\n    private int $lifetime;\r\n\r\n    \/** @var Configuration config *\/\r\n    private Configuration $config;\r\n \r\n    \/**\r\n     * The constructor.\r\n     *\r\n     * @param string $issuer The issuer name\r\n     * @param int $lifetime The max lifetime\r\n     * @param string $privateKey The private key as string\r\n     * @param string $publicKey The public key as string\r\n     *\/\r\n    public function __construct(\r\n        string $issuer,\r\n        int $lifetime,\r\n        string $privateKey,\r\n        string $publicKey\r\n    ) {\r\n        $this->issuer = $issuer;\r\n        $this->lifetime = $lifetime;\r\n        $this->signer = new Signer\\Rsa\\Sha256();\r\n        $this->publicKey = $publicKey;\r\n        $this->config = Configuration::forAsymmetricSigner(\r\n          \/\/ You may use RSA or ECDSA and all their variations (256, 384, and 512) and EdDSA over Curve25519\r\n          $this->signer,\r\n          InMemory::plainText($privateKey), \r\n          InMemory::plainText($publicKey)\r\n      );\r\n    }\r\n \r\n    \/**\r\n     * Get JWT max lifetime.\r\n     *\r\n     * @return int The lifetime in seconds\r\n     *\/\r\n    public function getLifetime(): int\r\n    {\r\n        return $this->lifetime;\r\n    }\r\n \r\n    \/**\r\n     * Create JSON web token.\r\n     *\r\n     * @param string $uid The user id\r\n     *\r\n     * @throws UnexpectedValueException\r\n     *\r\n     * @return string The JWT\r\n     *\/\r\n    public function createJwt(array $info): string\r\n    {\r\n      $issuedAt = new DateTimeImmutable();\r\n      \/\/ print_r($this->v5_UUID(\"\", 'JWT_TOKEN'));exit;\r\n      return ($this->config->builder()\r\n          ->issuedBy($this->issuer)\r\n          ->permittedFor($this->issuer)\r\n          ->identifiedBy($this->v5_UUID(\"0x752222\", \"JWT_TOKEN\"), true)\r\n          \/\/ Configures the time that the token was issue (iat claim)\r\n          ->issuedAt($issuedAt)\r\n          \/\/ Configures the time that the token can be used (nbf claim)\r\n          ->canOnlyBeUsedAfter($issuedAt)\r\n          \/\/ Configures the expiration time of the token (exp claim)\r\n          ->expiresAt($issuedAt->modify(\"+{$this->lifetime} seconds\"))\r\n          \/\/ Configures a new claim, called \"uid\"\r\n          ->withClaim(\"info\", $info)\r\n          \/\/ \/\/ Configures a new header, called \"foo\"\r\n          \/\/ ->withHeader(\"foo\", \"bar\")\r\n          \/\/ Builds a new token\r\n          ->getToken($this->config->signer(), $this->config->signingKey())\r\n        )->toString();\r\n    }\r\n \r\n    \/**\r\n     * Parse token.\r\n     *\r\n     * @param string $token The JWT\r\n     *\r\n     * @throws InvalidArgumentException\r\n     *\r\n     * @return Token The parsed token\r\n     *\/\r\n    public function createParsedToken(string $token): Plain\r\n    {\r\n        return $this->config->parser()->parse($token);\r\n    }\r\n \r\n    \/**\r\n     * Validate the access token.\r\n     *\r\n     * @param string $accessToken The JWT\r\n     *\r\n     * @return bool The status\r\n     *\/\r\n    public function validateToken(string $accessToken): bool\r\n    {\r\n      $token = $this->createParsedToken($accessToken);\r\n \r\n      $this->config->setValidationConstraints(new SignedWith($this->config->signer(), $this->config->verificationKey()));\r\n      $this->config->setValidationConstraints(new IssuedBy($token->claims()->get(\"iss\")));\r\n      $this->config->setValidationConstraints(new IdentifiedBy($token->claims()->get(\"jti\")));\r\n      $this->config->setValidationConstraints(new ValidAt(new SystemClock(new DateTimeZone(\"Asia\/Taipei\"))));\r\n\r\n      $constraints = $this->config->validationConstraints();\r\n      if (!$this->config->validator()->validate($token, ...$constraints)) {\r\n        return false;\r\n      }\r\n \r\n      return true;\r\n    }\r\n\r\n    public function v5_UUID(string $name_space, string $string): string {\r\n      $n_hex = preg_replace('\/[^0-9A-Fa-f\\-\\(\\)]\/', '', $name_space); \/\/ Getting hexadecimal components of namespace\r\n      $binray_str = ''; \/\/ Binary value string\r\n      \/\/Namespace UUID to bits conversion\r\n      for($i = 0; $i < strlen($n_hex); $i+=2) {\r\n        if(!isset($n_hex[$i+1])) {\r\n          $binray_str .= chr(hexdec($n_hex[$i]));\r\n          break;\r\n        }\r\n        $binray_str .= chr(hexdec($n_hex[$i].$n_hex[$i+1]));\r\n      }\r\n      \/\/hash value\r\n      $hashing = sha1($binray_str . $string);\r\n  \r\n      return sprintf('%08s-%04s-%04x-%04x-%12s',\r\n        \/\/ 32 bits for the time_low\r\n        substr($hashing, 0, 8),\r\n        \/\/ 16 bits for the time_mid\r\n        substr($hashing, 8, 4),\r\n        \/\/ 16 bits for the time_hi,\r\n        (hexdec(substr($hashing, 12, 4)) & 0x0fff) | 0x5000,\r\n        \/\/ 8 bits and 16 bits for the clk_seq_hi_res,\r\n        \/\/ 8 bits for the clk_seq_low,\r\n        (hexdec(substr($hashing, 16, 4)) & 0x3fff) | 0x8000,\r\n        \/\/ 48 bits for the node\r\n        substr($hashing, 20, 12)\r\n      );\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,6,6,6,6,null,6,6,6,null,null,null,null,null,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,null,null,null,null,5,null,5,5,5,5,null,5,null,5,null,5,null,5,null,null,null,5,5,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,2,null,2,2,2,2,null,2,2,0,null,null,2,null,null,null,5,5,null,5,5,5,5,null,5,null,null,5,null,5,null,5,null,5,null,5,null,null,5,null,5,null,null,null]},{"name":"src\\Utils\\ResponseFormat.php","source":"<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Utils;\r\n\r\nclass ResponseFormat\r\n{\r\n  public int $code;\r\n  public mixed $data;\r\n  public mixed $message;\r\n  \r\n  public function format(int $status = 200, mixed $data = null, mixed $message = null): ResponseFormat\r\n  {\r\n    \/\/ RESET\r\n    $this->reset();\r\n\r\n    if(gettype($data) === 'string') {\r\n      $this->message = $data;\r\n      $data = null;\r\n      $message = null;\r\n    }\r\n\r\n    if($data) {\r\n      $this->data = $data;\r\n    }\r\n\r\n    if($message) {\r\n      $this->message = $message;\r\n    }\r\n\r\n    $this->code = $status;\r\n    return $this;\r\n  }\r\n\r\n  private function reset(): void\r\n  {\r\n    $this->code = 200;\r\n    $this->data = null;\r\n    $this->message = null;\r\n  }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,7,null,7,2,2,2,null,null,7,6,null,null,7,4,null,null,7,7,null,null,null,null,7,7,7,null,null]},{"name":"src\\Utils\\Validation.php","source":"<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Utils;\r\n\r\nclass Validation\r\n{\r\n  private $_errors = array();\r\n  public function validate($src, $rules = array() ){\r\n    foreach($src as $item => $item_value){\r\n      if(key_exists($item, $rules)){\r\n        foreach($rules[$item] as $rule => $rule_value){\r\n          if(is_int($rule)) {\r\n            $rule = $rule_value;\r\n          }\r\n          switch ($rule){\r\n            case 'required':\r\n              if(empty($item_value) && $rule_value){\r\n                \/\/empty\u7f3a\u9ede 0 false\u6703\u8fd4\u56detrue\r\n                if($item_value === 0 || $item_value === false || $item_value === '0' || $item_value === 0.00) {\r\n                  break;\r\n                }\r\n                $this->addError($item,ucwords($item). ' \u7121\u6cd5\u70ba\u7a7a');\r\n              }\r\n              break;\r\n\r\n            case 'minLen':\r\n              if(mb_strlen((string)$item_value) < $rule_value){\r\n                $this->addError($item, ucwords($item). ' \u6700\u5c0f\u9577\u5ea6\u61c9\u70ba '.$rule_value. ' \u500b\u5b57\u5143');\r\n              }\r\n              break;\r\n\r\n            case 'maxLen':\r\n              if(mb_strlen((string)$item_value) > $rule_value){\r\n                $this->addError($item, ucwords($item). ' \u6700\u5927\u9577\u5ea6\u61c9\u70ba '.$rule_value. ' \u500b\u5b57\u5143');\r\n              }\r\n              break;\r\n\r\n            case 'numeric':\r\n              if(!is_numeric($item_value) && $rule_value){\r\n                $this->addError($item, ucwords($item). ' \u61c9\u70ba\u6578\u5b57');\r\n              }\r\n              break;\r\n            case 'float':\r\n              if(!is_float($item_value) && $rule_value){\r\n                $this->addError($item, ucwords($item). ' \u61c9\u70ba\u6d6e\u9ede\u6578');\r\n              }\r\n              break;\r\n            case 'alpha':\r\n              if(!ctype_alpha($item_value) && $rule_value){\r\n                $this->addError($item, ucwords($item). ' \u61c9\u70ba\u5b57\u6bcd');\r\n              }\r\n              break;\r\n            case 'space':\r\n              if(!ctype_space($item_value) && $rule_value){\r\n                $this->addError($item, ucwords($item). ' \u4e0d\u61c9\u6709\u7a7a\u683c');\r\n              }\r\n              break;\r\n            case 'email':\r\n              if(!filter_var($item_value, FILTER_VALIDATE_EMAIL) && $rule_value){\r\n                $this->addError($item, ucwords($item). ' \u4e0d\u70baEmail\u683c\u5f0f');\r\n              }\r\n              break;\r\n            case 'same':\r\n              if($item_value != $rule_value && $rule_value){\r\n                $this->addError($item, ucwords($item). ' \u8f38\u5165\u8981\u4e00\u81f4');\r\n              }\r\n              break;\r\n            case 'id_number':\r\n              $map = array(\r\n                'A'=>10,'B'=>11,'C'=>12,'D'=>13,'E'=>14,'F'=>15,\r\n                'G'=>16,'H'=>17,'I'=>34,'J'=>18,'K'=>19,'L'=>20,\r\n                'M'=>21,'N'=>22,'O'=>35,'P'=>23,'Q'=>24,'R'=>25,\r\n                'S'=>26,'T'=>27,'U'=>28,'V'=>29,'W'=>32,'X'=>30,\r\n                'Y'=>31,'Z'=>33\r\n              );\r\n              \/\/ ^: \u5fc5\u9808\u4ee5\u82f1\u6587\u958b\u982d\r\n              \/\/ $: \u5fc5\u9808\u4ee5\u6578\u5b57\u7d50\u5c3e\r\n              \/\/ \u5148\u6aa2\u67e5\u5b57\u6578\u53ef\u4ee5\u7bc0\u7701\u6642\u9593\r\n              $strLen = strlen($item_value);\r\n              $item_value = strtoupper($item_value);\r\n              if (($strLen != 10 || preg_match(\"\/^[A-Z][1-2][0-9]+$\/\", $item_value) == 0) && $rule_value) {\r\n                $this->addError($item, ucwords($item). ' \u4e0d\u70ba\u8eab\u4efd\u8b49\u683c\u5f0f');\r\n                break;\r\n              }\r\n              $code = 0;\r\n              for($i = 0; $i < $strLen; $i++){\r\n                $symbol = substr($item_value,$i,1);\r\n                \/\/ \u82f1\u6587\u5b57\u6bcd\r\n                if($i == 0){\r\n                  $tmp = $map[$symbol];\r\n                  $code += intval($tmp\/10) + ($tmp%10)*9;\r\n                \/\/ \u6700\u5f8c\u4e00\u78bc\r\n                }else if($i == $strLen - 1){\r\n                  $code += intval($symbol);\r\n                \/\/ \u5176\u4ed6: \u4e58\u4e0a 8,7,6,5,4,3,2,1\r\n                }else{\r\n                  $code += intval($symbol) * (9 - $i);\r\n                }\r\n              }\r\n              if($code % 10 != 0 && $rule_value){\r\n                $this->addError($item, ucwords($item). ' \u4e0d\u70ba\u8eab\u4efd\u8b49\u683c\u5f0f');\r\n              }\r\n              break;\r\n          }\r\n        }\r\n      }\r\n    }    \r\n  }\r\n  private function addError($item, $error){\r\n    $this->_errors[$item][] = $error;\r\n  }\r\n  public function error(){\r\n    if(empty($this->_errors)) {\r\n      return false;\r\n    }\r\n    return $this->_errors;\r\n  }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,6,6,6,6,6,null,6,6,6,null,4,0,null,4,null,6,null,6,0,0,null,0,null,6,6,0,null,6,null,0,0,0,null,0,0,0,0,null,0,0,0,0,null,0,0,0,0,null,0,0,0,0,null,0,0,0,0,null,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,0,0,0,null,0,0,0,null,0,0,null,null,0,null,null,0,0,null,0,null,null,null,null,null,null,4,null,null,6,5,null,4,null,null]}],"environment":{"packagist_version":"2.5.2"}}